/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SmtpImport } from './routes/smtp'
import { Route as ImageImport } from './routes/image'
import { Route as DatabaseImport } from './routes/database'
import { Route as AuthImport } from './routes/auth'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const SmtpRoute = SmtpImport.update({
  id: '/smtp',
  path: '/smtp',
  getParentRoute: () => rootRoute,
} as any)

const ImageRoute = ImageImport.update({
  id: '/image',
  path: '/image',
  getParentRoute: () => rootRoute,
} as any)

const DatabaseRoute = DatabaseImport.update({
  id: '/database',
  path: '/database',
  getParentRoute: () => rootRoute,
} as any)

const AuthRoute = AuthImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/database': {
      id: '/database'
      path: '/database'
      fullPath: '/database'
      preLoaderRoute: typeof DatabaseImport
      parentRoute: typeof rootRoute
    }
    '/image': {
      id: '/image'
      path: '/image'
      fullPath: '/image'
      preLoaderRoute: typeof ImageImport
      parentRoute: typeof rootRoute
    }
    '/smtp': {
      id: '/smtp'
      path: '/smtp'
      fullPath: '/smtp'
      preLoaderRoute: typeof SmtpImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/auth': typeof AuthRoute
  '/database': typeof DatabaseRoute
  '/image': typeof ImageRoute
  '/smtp': typeof SmtpRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/auth': typeof AuthRoute
  '/database': typeof DatabaseRoute
  '/image': typeof ImageRoute
  '/smtp': typeof SmtpRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/auth': typeof AuthRoute
  '/database': typeof DatabaseRoute
  '/image': typeof ImageRoute
  '/smtp': typeof SmtpRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/auth' | '/database' | '/image' | '/smtp'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/auth' | '/database' | '/image' | '/smtp'
  id: '__root__' | '/' | '/auth' | '/database' | '/image' | '/smtp'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRoute: typeof AuthRoute
  DatabaseRoute: typeof DatabaseRoute
  ImageRoute: typeof ImageRoute
  SmtpRoute: typeof SmtpRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRoute: AuthRoute,
  DatabaseRoute: DatabaseRoute,
  ImageRoute: ImageRoute,
  SmtpRoute: SmtpRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/auth",
        "/database",
        "/image",
        "/smtp"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/auth": {
      "filePath": "auth.tsx"
    },
    "/database": {
      "filePath": "database.tsx"
    },
    "/image": {
      "filePath": "image.tsx"
    },
    "/smtp": {
      "filePath": "smtp.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
